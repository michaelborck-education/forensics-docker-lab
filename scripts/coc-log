#!/bin/bash

#################################################################################
# Chain of Custody Command Logger
#
# This script logs forensic analysis commands with timestamps, outputs, and hashes
# for comprehensive chain of custody documentation.
#
# Usage: coc-log "command" "note"
# Example: coc-log "fls -r /evidence/usb.img" "Initial filesystem listing"
#
# Creates/updates: cases/[CaseName]/analysis_log.csv
#################################################################################

set -euo pipefail

# Get current case name from working directory or environment
CASE_NAME="${CURRENT_CASE:-}"
COMMAND="${1:-}"
NOTE="${2:-}"

# Validate inputs
if [ -z "$COMMAND" ]; then
    echo "Usage: coc-log \"command\" \"note\""
    echo "Example: coc-log \"fls -r /evidence/usb.img\" \"Initial filesystem listing\""
    exit 1
fi

# Determine case name from current directory if not provided
if [ -z "$CASE_NAME" ]; then
    # Try to detect case name from current directory path
    if [[ $(pwd) =~ /cases/([^/]+)(/|$) ]]; then
        CASE_NAME="${BASH_REMATCH[1]}"
    else
        echo "Error: Could not determine case name. Please run from /cases/[CaseName] directory."
        echo "Or set: export CURRENT_CASE=USB_Imaging"
        exit 1
    fi
fi

# Initialize paths
LOG_FILE="/cases/${CASE_NAME}/analysis_log.csv"
TEMP_OUTPUT="/tmp/coc_output_$$.txt"

# Create log directory if needed
mkdir -p "$(dirname "$LOG_FILE")"

# Get current timestamp in UTC ISO format
TIMESTAMP=$(date -u +'%Y-%m-%dT%H:%M:%SZ')

# Get analyst name from environment or container user
ANALYST="${ANALYST_NAME:-${USER:-analyst}}"

# Execute command and capture output
echo "[*] Executing: $COMMAND" >&2
if eval "$COMMAND" > "$TEMP_OUTPUT" 2>&1; then
    EXIT_CODE="0"
else
    EXIT_CODE="$?"
fi

# Calculate hash of output
OUTPUT_HASH=$(sha256sum "$TEMP_OUTPUT" | cut -d' ' -f1)

# Calculate output file size
OUTPUT_SIZE=$(wc -c < "$TEMP_OUTPUT")

# Create CSV header if file doesn't exist
if [ ! -f "$LOG_FILE" ]; then
    echo "timestamp_utc,analyst,command,exit_code,output_lines,output_hash,note" > "$LOG_FILE"
fi

# Count output lines
OUTPUT_LINES=$(wc -l < "$TEMP_OUTPUT")

# Escape CSV fields (handle quotes and commas)
COMMAND_ESCAPED=$(echo "$COMMAND" | sed 's/"/""/g' | sed 's/,/\,/g')
NOTE_ESCAPED=$(echo "$NOTE" | sed 's/"/""/g' | sed 's/,/\,/g')

# Append entry to log
{
    echo "$TIMESTAMP,$ANALYST,\"$COMMAND_ESCAPED\",$EXIT_CODE,$OUTPUT_LINES,$OUTPUT_HASH,\"$NOTE_ESCAPED\""
} >> "$LOG_FILE"

# Save output to evidence file
OUTPUT_FILE="/cases/${CASE_NAME}/outputs/$(basename "$COMMAND" | cut -d' ' -f1)_${TIMESTAMP%T*}_${TIMESTAMP##*T}.txt"
mkdir -p "$(dirname "$OUTPUT_FILE")"
cp "$TEMP_OUTPUT" "$OUTPUT_FILE"

# Report
echo "[✓] Command logged to: $LOG_FILE" >&2
if [ "$EXIT_CODE" != "0" ]; then
    echo "[!] Exit code: $EXIT_CODE" >&2
fi
echo "[✓] Output saved to: $OUTPUT_FILE" >&2
echo "[✓] Output hash: $OUTPUT_HASH" >&2

# Display output
cat "$TEMP_OUTPUT"

# Cleanup
rm -f "$TEMP_OUTPUT"

exit $((EXIT_CODE))
