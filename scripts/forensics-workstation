#!/bin/bash

#################################################################################
# DFIR Workstation Login Simulator
#
# This script provides an immersive entry experience for the Forensics Docker Lab
# It hides Docker commands and simulates logging into a dedicated DFIR workstation
#
# Usage: ./scripts/forensics-workstation [analyst_name]
# Example: ./scripts/forensics-workstation "Alice Johnson"
#################################################################################

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
ANALYST_NAME="${1:-}"
DOCKER_COMPOSE_CMD="docker compose"

#################################################################################
# Functions
#################################################################################

print_banner() {
    echo
    echo -e "${BLUE}"
    echo "  +=====================================================================+"
    echo "  |                                                                     |"
    echo "  |     DIGITAL FORENSICS & INCIDENT RESPONSE LABORATORY              |"
    echo "  |                                                                     |"
    echo "  |           Cyber Security Investigation Environment                |"
    echo "  |                                                                     |"
    echo "  +=====================================================================+"
    echo -e "${NC}"
}

check_docker() {
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}✗ Error: Docker is not installed or not in PATH${NC}"
        echo "  Please install Docker Desktop from https://www.docker.com/products/docker-desktop"
        exit 1
    fi

    if ! docker info > /dev/null 2>&1; then
        echo -e "${RED}✗ Error: Docker daemon is not running${NC}"
        echo "  Please start Docker Desktop and try again"
        exit 1
    fi
}

check_evidence_files() {
    if [ ! -f "$PROJECT_ROOT/evidence/usb.img" ] && [ ! -f "$PROJECT_ROOT/evidence/usb.E01" ]; then
        echo -e "${YELLOW}⚠ Warning: No evidence files found in evidence/ directory${NC}"
        echo "  Expected: usb.img or usb.E01"
        echo "  Students should copy evidence files from OneDrive to evidence/ folder"
        echo
        read -p "Continue anyway? (y/n) " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 0
        fi
    fi
}

prompt_analyst_name() {
    if [ -z "$ANALYST_NAME" ]; then
        echo -e "${CYAN}Forensic Analyst Login${NC}"
        read -p "Enter analyst name (for case documentation): " ANALYST_NAME

        if [ -z "$ANALYST_NAME" ]; then
            ANALYST_NAME="analyst"
        fi
    fi

    # Sanitize analyst name for use in environment variable
    ANALYST_NAME_SANITIZED=$(echo "$ANALYST_NAME" | tr ' ' '_' | tr -d '[:punct:]')
}

show_case_menu() {
    echo
    echo -e "${CYAN}Available Cases:${NC}"
    echo "  1 - USB_Imaging - Evidence handling, imaging and initial triage"
    echo "  2 - Memory_Forensics - Memory analysis with Volatility 2"
    echo "  3 - Autopsy_GUI - Graphical forensic examination"
    echo "  4 - Email_Logs - Email artifact and log analysis"
    echo "  5 - Network_Analysis - Network traffic and C2 detection"
    echo "  6 - Final_Report - Synthesis and professional reporting"
    echo "  0 - Skip case selection (all labs available)"
    echo
    read -p "Select lab (0-6) [0]: " -r LAB_CHOICE
    LAB_CHOICE=${LAB_CHOICE:-0}

    if [ "$LAB_CHOICE" != "0" ]; then
        case "$LAB_CHOICE" in
            1|2|3|4|5|6)
                case "$LAB_CHOICE" in
                    1) echo -e "${GREEN}✓ USB_Imaging selected${NC}" ;;
                    2) echo -e "${GREEN}✓ Memory_Forensics selected${NC}" ;;
                    3) echo -e "${GREEN}✓ Autopsy_GUI selected${NC}" ;;
                    4) echo -e "${GREEN}✓ Email_Logs selected${NC}" ;;
                    5) echo -e "${GREEN}✓ Network_Analysis selected${NC}" ;;
                    6) echo -e "${GREEN}✓ Final_Report selected${NC}" ;;
                esac
                ;;
            *)
                echo -e "${YELLOW}⚠ Invalid selection, proceeding with all labs${NC}"
                LAB_CHOICE="0"
                ;;
        esac
    fi
}

connect_to_workstation() {
    echo
    echo -e "${BLUE}Connecting to DFIR Workstation...${NC}"
    sleep 1
    echo -e "${CYAN}Initializing forensic environment...${NC}"
    sleep 1
    echo -e "${GREEN}✓ Connection established${NC}"
    sleep 1
    echo

    # Build the docker compose command with analyst name
    cd "$PROJECT_ROOT"

    # Export analyst name as environment variable for the container
    export ANALYST_NAME="$ANALYST_NAME"

    # Run the interactive container with the analyst name passed in
    # The entrypoint script will use this to customize the prompt
    $DOCKER_COMPOSE_CMD run --rm \
        --env "ANALYST_NAME=$ANALYST_NAME_SANITIZED" \
        -it dfir bash

    # Container has exited
    echo
    echo -e "${CYAN}Disconnecting from DFIR Workstation...${NC}"
    sleep 1
    echo -e "${GREEN}✓ Session ended${NC}"
}

show_help() {
    echo -e "${CYAN}Usage:${NC}"
    echo "  ./scripts/forensics-workstation [analyst_name]"
    echo
    echo -e "${CYAN}Examples:${NC}"
    echo "  ./scripts/forensics-workstation"
    echo "  ./scripts/forensics-workstation 'Alice Johnson'"
    echo "  ./scripts/forensics-workstation analyst1"
    echo
    echo -e "${CYAN}Inside the workstation:${NC}"
    echo "  Command examples:"
    echo "    ewfverify /evidence/usb.E01"
    echo "    fls -r /evidence/usb.img"
    echo "    coc-log 'command' 'note about action'"
    echo
    echo "  Exit with: exit"
    echo
    echo -e "${YELLOW}For more information, see: docs/README.md${NC}"
}

#################################################################################
# Main
#################################################################################

main() {
    # Handle help flag
    if [ "${1:-}" = "-h" ] || [ "${1:-}" = "--help" ]; then
        show_help
        exit 0
    fi

    # Print welcome banner
    print_banner

    # System checks
    check_docker
    check_evidence_files

    # Get analyst name
    prompt_analyst_name

    # Optional case selection
    show_case_menu

    # Connect to workstation
    connect_to_workstation

    # Cleanup and goodbye
    echo -e "${CYAN}Thank you for using the Forensics Lab. All work saved to ./cases/${NC}"
}

# Run main function
main "$@"
